---
apiVersion: v1
kind: Secret
metadata:
  name: ascender-app-admin-password
  namespace: {{ ASCENDER_NAMESPACE }}
stringData:
  password: {{ ASCENDER_ADMIN_PASSWORD }}
---
{% if 'https' == k8s_lb_protocol %}
apiVersion: v1
data:
  tls.crt: {{ lookup('ansible.builtin.file', tls_crt_path) | b64encode }}
  tls.key: {{ lookup('ansible.builtin.file', tls_key_path) | b64encode }}
kind: Secret
metadata:
  name: ascender-tls-secret
  namespace: {{ ASCENDER_NAMESPACE }}
type: kubernetes.io/tls
---
apiVersion: awx.ansible.com/v1beta1
kind: AWX
metadata:
  name: ascender-app
  namespace: {{ ASCENDER_NAMESPACE }}
spec:
  service_type: ClusterIP
  garbage_collect_secrets: {{ ascender_garbage_collect_secrets | default('false') }}
  admin_user: {{ ASCENDER_ADMIN_USER | default('admin')}}
  admin_password_secret: ascender-app-admin-password
  ingress_type: ingress
  ingress_path: "/"
  ingress_path_type: Prefix
  ingress_tls_secret: ascender-tls-secret
  hostname: {{ ASCENDER_HOSTNAME }}
  # https://github.com/ansible/awx/issues/14024
  extra_settings:
  - setting: CSRF_TRUSTED_ORIGINS
    value:
      - https://{{ ASCENDER_HOSTNAME }}
{% else %}
apiVersion: awx.ansible.com/v1beta1
kind: AWX
metadata:
  name: ascender-app
  namespace: {{ ASCENDER_NAMESPACE }}
spec:
  service_type: ClusterIP
  garbage_collect_secrets: {{ ascender_garbage_collect_secrets | default('false') }}
  admin_user: {{ ASCENDER_ADMIN_USER | default('admin')}}
  admin_password_secret: ascender-app-admin-password
  ingress_type: ingress
  ingress_path: "/"
  ingress_path_type: Prefix
  # https://github.com/ansible/awx/issues/14024
  extra_settings:
  - setting: CSRF_TRUSTED_ORIGINS
    value:
      - http://{{ ASCENDER_HOSTNAME }}
{% endif %}